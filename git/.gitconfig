[core]
  # Use Notepad++ as default editor
  editor = "'C:/Program Files (x86)/Notepad++/Notepad++.exe' -multiInst -notabbar -nosession -noPlugin"

  autocrlf = true      # Automatic conversion between CRLF (working directory) and LF (repository)
  safecrlf = false     # Don't warn about converting between CRLF and LF
  filemode = false     # Ignore file mode changes (recommended for Windows)
  trustctime = false   # Ignore ctime differences between the index and the working tree

  excludesfile = ~/.gitignore.local  # Add a local ignore file for all repositories

  # Use plink instead of OpenSSH. An alternative to GIT_SSH environment variable, which can be set per-repository.
  # sshCommand = plink

[color]
  ui = true

[diff]
  # Default diff tool
  tool = p4merge

[difftool "p4merge"]
  # Path to p4merge.exe (cmd is deprecated)
  path = C:/Program Files/Perforce/p4merge.exe

[merge]
  # Default merge tool
  tool = p4merge

[mergetool "p4merge"]
  # Path to p4merge.exe (cmd is deprecated)
  path = C:/Program Files/Perforce/p4merge.exe

[mergetool]
  keepBackup = false       # Don't create .orig files
  prompt = false           # Don't prompt before each invocation of the merge tool
  trustexitcode = false

[log]
  # Print out ref names on commits by default
  decorate = short

[pretty]
  # Custom log format and colors
  custom = "%Cred%h%Creset -%C(cyan)%d%Creset %s %C(green)(%cr) %Cblue<%an>%Creset"
  quick =  "%Cred%h%Creset -%C(cyan)%d%Creset %s %Cblue<%an>%Creset"
  my = "%Cred%h%Creset -%C(cyan)%d%Creset %s %C(green)(%cr)%Creset"

[fetch]
  # Always prune when fetching
  prune = true

[pull]
  # Allow only fast-forward merges when pulling
  ff = only

[push]
  # Push mode for centralized workflows
  default = simple

[rebase]
  # Automatically stash/unstash the working directory before/after rebases
  autostash = true

[rerere]
  # Reuse recorded resolution
  enabled = true

[alias]
  # Log
  lg   = log --graph --pretty=custom
  lga  = log --graph --pretty=custom --all
  q    = log --graph --pretty=custom --first-parent -20      # Quick overview
  # log --graph --pretty=custom --all --not origin/gh-pages  # Hide origin/gh-pages branch

  # My commits in the last 2 weeks
  my = log --graph --pretty=my --author='darekkay' --since=2.weeks

  # Common shortcuts
  co = checkout
  cm = checkout master
  cd = checkout develop
  mt = mergetool
  rc = rebase --continue

  # Push and create a remote branch based on the current one (branch â†’ origin/branch)
  ph = push -u origin HEAD

  # Add and commit all changes and new files
  all = "!f() { git add . && git commit -m \"$1\"; }; f"

  # View the current working tree status using the short format
  s = status -s

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -vv
  remotes = remote -v

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Delete all fully-merged branches except master, develop and the current one
  bd = "!f() { git branch | grep -v '^  master$' | grep -v '^  develop$' | grep -v ^* | xargs git branch -d; }; f"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Squash all commits. Usage: git squash-all (<commit message>)
  squash-all = "!f(){ git reset $(git commit-tree HEAD^{tree} -m \"${1:-Init repository}\");};f"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Commit count (from HEAD)
  count = git log --oneline | wc -l

  # Push master branch to all remotes
  pushall = !git remote | xargs -L1 -I R git push R master

  # Display the status and ahead/behind commits for all local branches and their remotes
  # state = !git for-each-ref --format='%(color:cyan)%(refname:short) %(color:green)%(push:track)' refs/heads && git status -s
  state = !git branch-status && git status -s

  # Open the current repository in the browser (use "open" instead of "explorer" for Unix)
  open = "!explorer `git remote -v | awk '/fetch/{print $2}' | sed -Ee 's#(git@|git://)#https://#' -e 's@com:@com/@'`| head -n1"

  # Commit with a random commit message from whatthecommit.com
  whatthecommit = !git commit --allow-empty -m \"$(curl -s whatthecommit.com/index.txt)\"

  # External scripts
  branch-status = !$HOME/.git/git-branch-status
  fetch-tracked = !$HOME/.git/git-fetch-tracked
  fake = !$HOME/.git/git-fake
  changelog = !$HOME/.git/git-changelog
  reset-origin = !$HOME/.git/git-reset-origin
